<?php


namespace App\Command;

use Discord\Discord;
use Discord\Exceptions\Rest\NoPermissionsException;
use Discord\Parts\Channel\Channel;
use Psr\Log\LoggerInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;


class SendMessage extends Command
{
    protected static $defaultName = 'app:send-message';

    /**
     * @var LoggerInterface
     */
    private $logger;

    /**
     * @param LoggerInterface $logger
     * @required
     */
    public function setLogger(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    protected function configure()
    {
        $this->addArgument('message', InputArgument::IS_ARRAY, 'Сообщение для всех каналов доступных для бота');
        parent::configure(); // TODO: Change the autogenerated stub
    }


    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $message = $input->getArgument('message');
        if (is_array($message)){
            $message = implode(' ', $message);
        }

        $discord = new Discord([
            'token' => 'ODUyNTc1NjEyMDg1NjAwMjU2.YMI06g.TyfLr_kYrI3Nlp-M-SwuGLztnmQ',
            'logger' => $this->logger,
        ]);

        $discord->on('ready', function ($discord) use($message) {
            $channels = [];
            foreach ($discord->guilds as $guild) {
                foreach ($guild->channels as $channel){
                    /**
                     * @var Channel $channel
                     */
                    if ($channel->allowText()){
//                        $channels[] = implode(' ',[$guild->id, $channel->name, $channel->id]);
                        $channels[] = $channel;
                    }
                }
            }
//            var_dump($channels);
            foreach ($channels as $channel) {
                $channel->sendMessage($message)->otherwise(function (NoPermissionsException $reason) use($channel) {
                    $this->logger->error('{channelName}: {message}', [
                        'message' => $reason->getMessage(),
                        'channelName' => $channel->name,
                    ]);
                    var_dump($reason->getMessage());
                });
            }
        });

        $discord->run();
        return 0;
    }
}