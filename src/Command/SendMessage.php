<?php


namespace App\Command;

use Discord\Discord;
use Discord\Exceptions\Rest\NoPermissionsException;
use Discord\WebSockets\Event;
use Psr\Log\LoggerInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Discord\Parts\Channel\Channel;
use Discord\Parts\Channel\Message;
use Discord\Parts\Embed\Embed;
use Discord\Parts\Part;


class SendMessage extends Command
{
    protected static $defaultName = 'app:send-message';

    /**
     * @var LoggerInterface
     */
    private $logger;

    /**
     * @param LoggerInterface $logger
     * @required
     */
    public function setLogger(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    protected function configure()
    {
        $this->addArgument('message', InputArgument::IS_ARRAY, 'Сообщение для всех каналов доступных для бота');
        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $message = $input->getArgument('message');
//        if (is_array($message)){
//            $message = implode(' ', $message);
//        }
        $discord = new Discord([
            'token'  => 'ODUyNTc1NjEyMDg1NjAwMjU2.YMI06g.TyfLr_kYrI3Nlp-M-SwuGLztnmQ',
            'logger' => $this->logger,
        ]);
        $embed   = new Embed($discord);

        $discord->on('ready', function ($discord) use ($message, $output, $embed) {
            $embed->setTitle($message['title'])
                ->setDescription($message['description'])
                ->setFooter('by MorskoyPes')
                ->setColor(0xFF0000)
                ->addField([
                    'name'   => $message['field_name'],
                    'value'  => $message['field_value'],
                    'inline' => false,
                ])
                ->setThumbnail('https://lh3.googleusercontent.com/proxy/6BxBObOV2UWlHvNj1kAKNR_i47CZIYsgTjht978u-qudq_MtndYHqRhezcyMZLlEVeggYHQ6Gn_7YOxi8F0')
                ->setImage($message['image']);

            $channels = [];
            foreach ($discord->guilds as $guild) {
                foreach ($guild->channels as $channel) {
//                    var_dump($channel->allowText());
//                    $output->writeln('<fg=blue>Vse kanaly: ' . $channel->name . ' ' . $channel->allowText() . '</>');
//                    $output->writeln('<fg=yellow> Permision ' . $channel);
                    if (!$channel->permission_overwrites) {
                        /**
                         * @var Channel $channel
                         */
                        if ($channel->allowText()) {
//                          $channels[] = implode(' ',[$guild->id, $channel->name, $channel->id]);
                            $channels[] = $channel;
                        }
                        $output->writeln('<fg=green>True kanaly: ' . $channel . $channel->name . '</>');
                    }
                }
            }

            foreach ($channels as $channel) {
                $channel->sendMessage($message['title'], false, $embed)->done(function (Message $message) {
                }, function (NoPermissionsException $reason) use ($channel) {
                    $this->logger->error('{channelName}: {message}', [
                        'message'     => $reason->getMessage(),
                        'channelName' => $channel->name,
                    ]);
//                    var_dump($reason->getMessage());
                });
            }
            $discord->on(Event::MESSAGE_CREATE, function (Message $message, Discord $discord) {
                if ($message->author->username === 'Calibrio') {
                    $discord->close();
                }
            });
        });

        $discord->run();

        return 0;
    }
}